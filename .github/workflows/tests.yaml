name: Tests

on: [push, pull_request]

jobs:
  test:
    defaults:
      run:
        # see https://github.com/conda-incubator/setup-miniconda/#important
        shell: bash -l {0}

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.7", "3.8", "3.9"]

        # Uncomment to stress-test the test suite for random failures
        # This will take a LONG time and delay all PRs across the whole github.com/dask!
        # run: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Conda Environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          channels: conda-forge,defaults
          channel-priority: true
          python-version: ${{ matrix.python-version }}
          environment-file: continuous_integration/environment-${{ matrix.python-version }}.yaml
          activate-environment: dask-distributed
          auto-activate-base: false

      - name: Install stacktrace
        # stacktrace for Python 3.8 has not been released at the moment of writing
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version < '3.8' }}
        run: mamba install -c conda-forge -c defaults -c numba libunwind stacktrace

      - name: Hack around https://github.com/ipython/ipython/issues/12197
        # This upstream issue causes an interpreter crash when running
        # distributed/protocol/tests/test_serialize.py::test_profile_nested_sizeof
        if: ${{ matrix.os == 'windows-latest' && matrix.python-version == '3.9' }}
        run: mamba uninstall ipython

      - name: Install
        run: |
          # Cythonize scheduler on Python 3.7 builds
          if [[ "${{ matrix.python-version }}" = "3.7" ]]; then
              python -m pip install -vv --no-deps --install-option="--with-cython" -e .
              python -c "from distributed.scheduler import COMPILED; assert COMPILED"
          else
              python -m pip install --no-deps -e .
              python -c "from distributed.scheduler import COMPILED; assert not COMPILED"
          fi

      - name: mamba list
        run: mamba list

      - name: mamba env export
        run: |
          echo -e "--\n--Conda Environment (re-create this with \`mamba env create --name <name> -f <output_file>\`)\n--"
          mamba env export | grep -E -v '^prefix:.*$'

      - name: Setup SSH
        # FIXME no SSH available on Windows
        # https://github.com/dask/distributed/issues/4509
        if: ${{ matrix.os != 'windows-latest' }}
        run: bash continuous_integration/scripts/setup_ssh.sh

      - name: Coverage debug
        run: |
          python -c 'from coverage.tracer import CTracer'
          coverage debug sys
      - name: Test
        env:
          PYTHONFAULTHANDLER: 1
        run: |
          if [[ "${{ matrix.os }}" = "ubuntu-latest" ]]; then
              # FIXME ipv6-related failures on Ubuntu github actions CI
              # https://github.com/dask/distributed/issues/4514
              export DISABLE_IPV6=1
          fi

          source continuous_integration/scripts/set_ulimit.sh
          if [[ "${{ matrix.os }}" = "ubuntu-latest" ]]; then
            pytest distributed \
              -m "not avoid_ci" \
              --runslow \
              --cov \
              --cov-report=xml
          else
            pytest distributed \
              -m "not avoid_ci" \
              --runslow
          fi

      - name: Upload coverage
        uses: codecov/codecov-action@v1
        if: ${{ always() }}

      # - name: Debug with tmate on failure
      #   if: ${{ failure() }}
      #   uses: mxschmitt/action-tmate@v3
